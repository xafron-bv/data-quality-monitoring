/* 
  Rule Structure Documentation:
  
  - Each rule needs a unique rule_name, descriptive description, and an operation type
  - Supported operations for error_rules: string_replace, regex_replace, prepend, append, add_whitespace, random_noise
  - Operations can be conditional using the 'conditions' array with type 'contains'
  - For regex_replace, you can limit replacements with the 'count' parameter

  IMPORTANT REGEX NOTES:
  - When using 'regex_replace', use standard Python re module syntax
  - Do NOT use advanced regex escape sequences like \L (lowercase) or \U (uppercase)
  - For captured groups, use \1, \2 (not $1, $2) in the replacement string
  - When in doubt, prefer 'string_replace' over 'regex_replace' for simplicity
  - Rules operate directly on cell values in the specified column, not on column headers
*/
{
  "error_rules": [
    {
      /* 
        Supported operations:
        - string_replace: Simple find and replace (safest option, prefer this for most cases)
        - regex_replace: Pattern-based replacement using regular expressions (use \1 not $1 for captures)
        - prepend: Add text to the beginning
        - append: Add text to the end
        - add_whitespace: Add spaces around the text (doesn't need find/replace params)
        - random_noise: Inject random characters (doesn't need find/replace params)

        IMPORTANT: Rules target the actual values in the specified column, not column headers.
        For conditional rules, use conditions that check the cell value, not the column name.
      */
      "rule_name": "inject_error_placeholder",
      "description": "Example of a simple string replacement error injection rule",
      "operation": "string_replace",
      "params": {
        /* For string_replace: use 'find' and 'replace' */
        "find": "Category_Name",
        "replace": "Wrong_Category"
        /* For regex_replace: use 'pattern' instead of 'find', and you can add 'count' to limit replacements */
      },
      "conditions": [{ "type": "contains", "value": "Category_Name" }]
    },
    {
      "rule_name": "regex_replace_example",
      "description": "Example of a proper regex replacement rule",
      "operation": "regex_replace",
      "params": {
        "pattern": "([A-Z])([a-z]+)",
        "replace": "\\1\\2_Error",
        "count": 1
      },
      "conditions": [{ "type": "contains", "value": "SomeValue" }]
      /* 
      Optional conditions example:
      "conditions": [
        { "type": "contains", "value": "some text that must be present for this rule to apply" }
      ]
      */
    }
  ]
}
